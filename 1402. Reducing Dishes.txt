A chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time.

Like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. time[i] * satisfaction[i].

Return the maximum sum of like-time coefficient that the chef can obtain after dishes preparation.

Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.

 

Example 1:

Input: satisfaction = [-1,-8,0,5,-9]
Output: 14
Explanation: After Removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14).
Each dish is prepared in one unit of time.

Example 2:

Input: satisfaction = [4,3,2]
Output: 20
Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)

Example 3:

Input: satisfaction = [-1,-4,-5]
Output: 0
Explanation: People do not like the dishes. No dish is prepared.

Approach :

  Brute force:
         1. Sort the array given.
         2. We can either include a satisfaction level or exclude it. 
         3. If we include the satisfaction level then answer will add satisfaction[i] * (time+1) and then the recursive calls for including and excluding.
         4. The base case here is when the index becomes equal to size of satisfaction array.
         5. Return max of include and exclude.


  But, since, it is a recursive approach, the time complexity is exponential.


  Recursion + Memoization:

        1. Make a 2D dp.
        2. Store the max of include and exclude in dp[index][time] to use it whenever required.

  Rest of the approach is same as recursion.

  Tabulation (Bottom-Up approach) :

        1. Make a 2D dp.
        2. Start the index from end and time from index.
        3. For every index we will calculate maximum satisfaction time from that index.

