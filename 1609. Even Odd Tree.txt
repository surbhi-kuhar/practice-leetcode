A binary tree is named Even-Odd if it meets the following conditions:

The root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc.
For every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).
For every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).
Given the root of a binary tree, return true if the binary tree is Even-Odd, otherwise return false.

Example 1:

Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]
Output: true
Explanation: The node values on each level are:
Level 0: [1]
Level 1: [10,4]
Level 2: [3,7,9]
Level 3: [12,8,6,2]
Since levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.


Example 2:

Input: root = [5,4,2,3,3,7]
Output: false
Explanation: The node values on each level are:
Level 0: [5]
Level 1: [4,2]
Level 2: [3,3,7]
Node values in level 2 must be in strictly increasing order, so the tree is not Even-Odd.

Example 3:

Input: root = [5,9,1,3,5,7]
Output: false
Explanation: Node values in the level 1 should be even integers.


Approach :        LEVEL ORDER TRAVERSAL 

Level order traversal is a way of traversal in a binary tree. A queue is used to achieve it. Let us look at an example of level order traversal.

    1
   /  \
  3    2

The above is a tree and we have to do its level order traversal, the answer will be 1,3,2.

Steps to do level order traversal : 
1. Create a queue and push the root value in queue. Also, push NULL in queue. 
   What is the purpose of NULL ?
   Ans : It will help us identify that we have traversed a level completely and now, the next level will start.

2. Until queue does not become empty, pop the top value from queue which is 1 in this case and store in a vector. 
3. Push the left and right values in the queue, if they exist. But, there is a problem here. What if the top value from queue is NULL. Hence, we have to check beforehand, whether top is NULL or not.
4. If top is not NULL, we have to push its children in queue, but if top is NULL, then there may be two possibilities, first, a level is finished and there are more elements in queue, second, a level is 
    finished and there are no more elements in the queue. If there are no more elements in the queue that means we will stop our traversal, but in first case, we will push NULL again in queue to mark the 
    end of next level.

What modification can be done in this traversal method to solve the actual problem ?

Ans : There are some points to be kept in mind. 

1. Maintain a variable index which is initialized as 0. Whenever a NULL appears, increment the index because the level is changing now.
2. Now, a NULL appears at the top of queue, from that point till another NULL appears, the elements between them have to checked.
3. First, index is checked if it is odd or even, based on the conditions we check of top element is less than or greater than prev element, depending on the condition, return false.
4. But, how to keep track of previous element? Simply, make a variable temp = -1 , update this temp with current top, whenever the top is greater or less than temp, depends on index. But, temp is not checked 
   with first node of the level because there is no previous for it.




I hope the code will make you understand things in a better way !!















