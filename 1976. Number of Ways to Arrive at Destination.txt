Problem Statement:

You are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.

You are given an integer n and a 2D integer array roads where roads[i] = [ui, vi, timei] means that there is a road between intersections ui and vi that takes time minutes to travel. You want to know in how many ways you can travel from intersection 0 to intersection n - 1 in the shortest amount of time.

Return the number of ways you can arrive at your destination in the shortest amount of time. Since the answer may be large, return it modulo 109 + 7.

Input: n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]
Output: 4

Input: n = 2, roads = [[1,0,10]]
Output: 1

Approach :

Since we have to reach the destination within the shortest time, we will use Dijkstra's algorithm. But additionally, we have to return the number of ways 
in which we can reach in the shortest time.

Let us discuss algo which is (Dijkstra + DP).

1.  Make an array 'dist' to store the distance from the 0th node to others and a set which will contain pairs, each pair will contain the node value and distance to reach that value.
2.  Initialize dist[0] with 0, because 0 can move to itself in 0 distance.
3.  Insert {0,0} in set. 
4.  Start popping values from the set and compare them with all the neighbouring nodes of the popped node. If the distance to reach neighbouring node is less than the dist[neighbour], then we will update the dist[neighbour].
5.  We will make an array DP for storing the number of ways to reach the ith node in the shortest time.
6.  If dist[neighbour] is equal to the distance required to reach the neighbour from the popped node means we have got one way to reach the neighbouring node.
    dp[neigh] = dp[neigh] + dp[parent]
7.  If it is less than that means 
    dp[neigh] = dp[parent]

Things will become more clear with code.

