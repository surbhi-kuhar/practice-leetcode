A certain bug's home is on the x-axis at position x. Help them get there from position 0.

The bug jumps according to the following rules:

It can jump exactly a positions forward (to the right).
It can jump exactly b positions backward (to the left).
It cannot jump backward twice in a row.
It cannot jump to any forbidden positions.
The bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers.

Given an array of integers forbidden, where forbidden[i] means that the bug cannot jump to the position forbidden[i], and integers a, b, and x, return the minimum number of jumps needed for the bug to reach its home. If there is no possible sequence of jumps that lands the bug on position x, return -1.

 

Example 1:

Input: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9
Output: 3

Example 2:

Input: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11
Output: -1

Example 3:

Input: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7
Output: 2


Approach :

The approach is really very simple. We insert all the forbidden positions in a set so that when we reach any position, we can check whether it is present in set or not.
If it is present means the position is forbidden else it is not.

Now, either we can move forward/backward and every time we move forward/backward our number of jumps increases by 1.
But we cannot jump backward twice, so we have to make a boolean value , let us say back, so we will check back everytime we have to move backward, if back is 
true means we already jumped backwards and now we cannot jump backward again.

Now, since we have two variables changing, one is position and the other is back. Hence, we will make a 2D DP.

dp[6001[2]

We are taking the size of dp because using a range of 6000 would provide enough buffer to handle different test cases efficiently without causing any issues related to exceeding the constraints or memory limits. 
We will keep on finding forward and backward jumps and store minimum of them in the dp array.
