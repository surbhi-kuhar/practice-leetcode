Problem statement :

Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.


Example 1:

Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15

Approach : 

First of all we will traverse through the matrix and if we encounter a 1 then we will do something.

If we encounter a 1, we will see if we can make a square or not. A square will be possible if right element, bottom element and diagonal element are 1. 
And then we will recursively call for this right, down and diagonal.

1 -- 2
| \
1   3 

Suppose, we got 2 from right , 1 from bottom and 3 from diagonal. What does it mean ?
-------
|1  1 | 1  0
|1  1 | 1  1
-------
 0  1   1  1
 0  1   1  1

The matrix which can be predicted with right, bottom and diagonal values is shown above. The square that can be formed is of size 2 which can be written as 
   min(right,min(botton,diagonal)) + 1

Pseudo Code :

1.  Traverse through the matrix and when we find a one call a function for finding square.
2.  Check if indexes go out of range, that is our base case. 
3.  Find right, bottom and diagonal for every position where matrix[i][j] is 1.
4.  The square size that can be formed is min(right,min(bottom,diagonal)) + 1.
5.  Add these values to the ans.
6.  Return ans.
